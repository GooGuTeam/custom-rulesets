name: Publish Ruleset DLLs

on:
  push:
    branches:
      - main
    tags:
      - '*'
    paths:
      - "patches/**"
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: tau
            repository: taulazer/tau
            project: osu.Game.Rulesets.Tau/osu.Game.Rulesets.Tau.csproj
            dll: osu.Game.Rulesets.Tau.dll
          - id: sentakki
            repository: LumpBloom7/sentakki
            project: osu.Game.Rulesets.Sentakki/osu.Game.Rulesets.Sentakki.csproj
            dll: osu.Game.Rulesets.Sentakki.dll
          - id: rush
            repository: Beamographic/rush
            project: osu.Game.Rulesets.Rush/osu.Game.Rulesets.Rush.csproj
            dll: osu.Game.Rulesets.Rush.dll
          - id: hishigata
            repository: LumpBloom7/hishigata
            project: osu.Game.Rulesets.Hishigata/osu.Game.Rulesets.Hishigata.csproj
            dll: osu.Game.Rulesets.Hishigata.dll
          - id: soyokaze
            repository: goodtrailer/soyokaze
            project: osu.Game.Rulesets.Soyokaze/osu.Game.Rulesets.Soyokaze.csproj
            dll: osu.Game.Rulesets.Soyokaze.dll
    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Checkout ${{ matrix.id }} repository
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repository }}
          path: repos/${{ matrix.id }}

      - name: Apply patch
        run: |
          git -C repos/${{ matrix.id }} apply < "${{ github.workspace }}/patches/${{ matrix.id }}.patch"

      - name: Restore and publish
        working-directory: repos/${{ matrix.id }}
        run: |
          dotnet restore "${{ matrix.project }}"
          dotnet publish "${{ matrix.project }}" --configuration Release --output "${{ github.workspace }}/build/${{ matrix.id }}"

      - name: Collect ruleset DLL
        run: |
          mkdir -p artifacts/${{ matrix.id }}
          source="build/${{ matrix.id }}/${{ matrix.dll }}"
          if [ ! -f "$source" ]; then
            echo "Expected DLL not found at $source" >&2
            exit 1
          fi
          cp "$source" "artifacts/${{ matrix.id }}/${{ matrix.dll }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.id }}
          path: artifacts/${{ matrix.id }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Determine release tag
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          tag="${GITHUB_REF_NAME}"
          if [ -z "$tag" ]; then
            echo "Failed to determine release tag" >&2
            exit 1
          fi
          echo "tag=${tag}" >> "$GITHUB_OUTPUT"

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ steps.version.outputs.tag }}
        run: |
          notes="Automated release generated on $(date -u '+%Y-%m-%d')."
          shopt -s nullglob
          assets=(release-assets/*/*.dll)
          if [ ${#assets[@]} -eq 0 ]; then
            echo "No assets found to upload" >&2
            exit 1
          fi
          gh release create "$TAG_NAME" "${assets[@]}" --title "$TAG_NAME" --notes "$notes"
